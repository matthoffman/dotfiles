# See following for more information: http://www.infinitered.com/blog/?p=19
if [[ $- == *i* ]] ; then
  export IS_INTERACTIVE=true
else
  export IS_INTERACTIVE=false
fi

if [[ -z $SSH_CONNECTION ]]; then
  export IS_REMOTE=false
else
  export IS_REMOTE=true
fi


# Colors ----------------------------------------------------------
#export TERM=xterm-color # Let the terminal export this!  Don't need to put it in a bashrc. 
# Many terminals can instead support 256 colors, and will represent themselves as xterm-256color or similar.
export GREP_OPTIONS='--color=auto' GREP_COLOR='1;32'
export CLICOLOR=1 


if [ "$OS" = "linux" ] ; then
  alias ls='ls --color=auto' # For linux, etc
  # ls colors, see: http://www.linux-sxs.org/housekeeping/lscolors.html
  export LS_COLORS='di=1:fi=0:ln=31:pi=5:so=5:bd=5:cd=5:or=31:mi=0:ex=35:*.rb=90'  #LS_COLORS is not supported by the default ls command in OS-X
else
  alias ls='ls -G'  # OS-X SPECIFIC - the -G command in OS-X is for colors, in Linux it's no groups
fi

# Setup some colors to use later in interactive shell or scripts
export COLOR_NC='\033[0m' # No Color
export COLOR_WHITE='\033[1;37m'
export COLOR_BLACK='\033[0;30m'
export COLOR_BLUE='\033[0;34m'
export COLOR_LIGHT_BLUE='\033[1;34m'
export COLOR_GREEN='\033[0;32m'
export COLOR_LIGHT_GREEN='\033[1;32m'
export COLOR_CYAN='\033[0;36m'
export COLOR_LIGHT_CYAN='\033[1;36m'
export COLOR_RED='\033[0;31m'
export COLOR_LIGHT_RED='\033[1;31m'
export COLOR_PURPLE='\033[0;35m'
export COLOR_LIGHT_PURPLE='\033[1;35m'
export COLOR_BROWN='\033[0;33m'
export COLOR_YELLOW='\033[1;33m'
export COLOR_GRAY='\033[1;30m'
export COLOR_LIGHT_GRAY='\033[0;37m'
alias colorslist="set | egrep 'COLOR_\w*'"  # lists all the colors


# we used these colors for the alternate svn and git completions...not sure why. 
#BLACK="\[\033[0;38m\]"
#RED="\[\033[0;31m\]"
#RED_BOLD="\[\033[01;31m\]"
#BLUE="\[\033[01;34m\]"
#GREEN="\[\033[0;32m\]"

alias colorslist="set | egrep 'COLOR_\w*'"  # Lists all the colors, uses vars in .bashrc_non-interactive



# History -------------------------------------------------------------
export HISTCONTROL=ignoredups
export HISTFILESIZE=3000
export HISTIGNORE="ls:cd:[bf]g:exit:..:...:ll:lla"
alias h=history
hf(){ 
  grep "$@" ~/.bash_history
}


if [ $IS_INTERACTIVE = 'true' ] ; then # Interactive shell only
  # Input stuff -------------------------------------------------------
  bind "set completion-ignore-case on" # note: bind used instead of sticking these in .inputrc
  bind "set show-all-if-ambiguous On" # show list automatically, without double tab
  bind "set bell-style none" # no bell

  # Use vi command mode
  #bind "set editing-mode vi"
  #set -o vi
  #bind -m vi-command -r 'v'

  shopt -s checkwinsize # After each command, checks the windows size and changes lines and columns



  # Completion -------------------------------------------------------

    # Turn on advanced bash completion if the file exists 
    # Get it here: http://www.caliban.org/bash/index.shtml#completion or 
    # on OSX: sudo port install bash-completion
    if [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
    if [ -f /opt/local/etc/bash_completion ]; then
        . /opt/local/etc/bash_completion
    fi
    if [ -f /usr/local/etc/bash_completion ]; then
        . /usr/local/etc/bash_completion
    fi

    # git completion
    source ~/src/dotfiles/bin/git-completion.bash
    # ...and svn completion
    source ~/src/dotfiles/bin/svn-completion.bash

    # Add completion to source and .
    # note that bash-completion 2.0 breaks these lines. I haven't looked into how to fix them, because 
    # bash-completion 2.0 breaks a lot of things for me. Like bash completion. 
    complete -F _command source 
    complete -F _command .
    
    export GIT_PS1_SHOWDIRTYSTATE=true
    export GIT_PS1_SHOWUNTRACKEDFILES=true

    # Prompts ----------------------------------------------------------
    #git_dirty_flag() {
      #git status 2> /dev/null | grep -c : | awk '{if ($1 > 0) print "âš¡"}'
    #}

           
           

    prompt_func() {
        previous_return_value=$?;
        if [ $IS_REMOTE = 'true' ] ; then
          prompt="\[\033]0;${USER} ${PWD}\007\]\[${COLOR_PURPLE}\]\w\[${COLOR_GRAY}\]$(__git_ps1)$(__svn_ps1)\[${COLOR_NC}\] "
        else
          prompt="\[\033]0;${USER} ${PWD}\007\]\[${COLOR_GREEN}\]\w\[${COLOR_GRAY}\]$(__git_ps1)$(__svn_ps1)\[${COLOR_NC}\] "
        fi
        #this works too:  prompt="\[\033]0;${USER} ${PWD}\007\]\[${COLOR_GREEN}\]\w\[${COLOR_GRAY}\]\$(__git_ps1)\$(__svn_ps1)\[${COLOR_NC}\] "
        #prompt="\[\033]0;${USER} ${PWD}\007\]\[${COLOR_GREEN}\]\w\[${COLOR_GRAY}\]\$(parse_git_branch)\$(parse_svn_branch)\[${COLOR_NC}\] "
        #prompt="\[\033]0;${USER} ${PWD}\007\]\[${COLOR_GREEN}\]\w\[${COLOR_GRAY}\]$(__git_ps1)\[${COLOR_NC}\] "
        #prompt="\033]0;${PWD}\007\[${COLOR_GREEN}\]\w\[${COLOR_GRAY}\]$(__git_ps1)\[${COLOR_NC}\] "
        #prompt="\[${COLOR_GREEN}\]\w\[${COLOR_GRAY}\]$(__git_ps1)\[${COLOR_YELLOW}\]$(git_dirty_flag)\[${COLOR_NC}\] "

        if test $previous_return_value -eq 0
        then
            PS1="${prompt}> "
        else
            PS1="${prompt}\[${COLOR_RED}\]> \[${COLOR_NC}\]"
        fi
    }
    PROMPT_COMMAND=prompt_func

    #Matt's previous prompts, most recent to least: 
    # export PS1="$GREEN\w$RED\$(parse_git_branch)\$(parse_svn_branch) $GREEN>$BLACK " # note this doesn't use the same COLOR_* variables, it uses slightly different ones. But it works.
    # export PS1='\[\e[0;32m\]\w\[\e[1;34m\]$(__git_ps1 " (%s)")\[\e[0;32m\] > \[\e[0m\]\]'  # Primary prompt with only a path -- this one seemed to cause issues with multiple lines
    # export PS1='\...@\h:\w$(__git_ps1 " (%s)")$ '
    # export PS1="\[${COLOR_GRAY}\]\u@\h \[${COLOR_GREEN}\]\w > \[${COLOR_NC}\]"  # Primary prompt with user, host, and path 
    # ...and a couple that came from twerth's original dotfiles branch:
    # export PS1="\[${COLOR_GREEN}\]\w\[${COLOR_NC}\] > "  # Primary prompt with only a path
    # export PS1="\[${COLOR_RED}\]\w > \[${COLOR_NC}\]"  # Primary prompt with only a path, for root, need condition to use this for root
    # export PS1="\[${COLOR_GRAY}\]\u@\h \[${COLOR_GREEN}\]\w > \[${COLOR_NC}\]"  # Primary prompt with user, host, and path 

    # This runs before the prompt and sets the title of the xterm* window.  If you set the title in the prompt
    # weird wrapping errors occur on some systems, so this method is superior
    # export PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*} ${PWD}"; echo -ne "\007"'  # user@host path

    export PS2='> '    # Secondary prompt
    export PS3='#? '   # Prompt 3
    export PS4='+'     # Prompt 4

    function xtitle {  # change the title of your xterm* window
      unset PROMPT_COMMAND
      echo -ne "\033]0;$1\007" 
    }

fi


# Navigation -------------------------------------------------------
alias ..='cd ..'
alias ...='cd .. ; cd ..'
alias ....='... ; cd ..'
cl() { cd $1; ls -la; } 

source ~/src/dotfiles/bin/bashmarks.sh

# Editors ----------------------------------------------------------
#export EDITOR='mate -w'  # OS-X SPECIFIC - TextMate, w is to wait for TextMate window to close
#export EDITOR='gedit'  #Linux/gnome
export EDITOR='vim'  #Command line
export GIT_EDITOR='vim'
#alias gvim='/Applications/MacVim.app/Contents/MacOS/vim -g'

if [ "$OS" = "darwin" ] ; then
  alias v=mvim
  alias vc=vim
  alias vt='mvim --remote-tab'
else
  alias v=vim
fi

# Sluething----------------------------------------------------
findportuser() {
    lsof -i :"$1"
}

monitor_traffic(){
  # install ngrep with sudo port install ngrep
  sudo ngrep -W byline -qld en1 "$1" 
}

# Other aliases ----------------------------------------------------
alias ll='ls -hl'
alias la='ls -a'
alias lla='ls -lah'

# Search
# Use ack for grepping and find if ack is available
# sudo port install p5-app-ack
if type -P ack &>/dev/null ; then 
  g(){
    ack "$*" --color-match=green --color-filename=blue --smart-case
  }
  gw(){
    ack "$*" --color-match=green --color-filename=blue --word-regexp --smart-case
  }
  f(){
    ack -i -g ".*$*[^\/]*$" | highlight blue ".*/" green "$*[^/]"
  }
else
  g(){
    grep -Ri --exclude=*.svn* $1 *
  }
fi



# Misc
alias reloadbash='source ~/src/dotfiles/etc/bash_profile'

alias ducks='du -cksh * | sort -rn|head -11' # Lists folders and files sizes in the current folder
alias m='more'
if [ "$OS" = "darwin" ] ; then 
  alias top='top -o cpu' # os x. GNU top doesn't have a -o option.
fi



alias df='df -h' # Show disk usage

if [ "$OS" = "linux" ] ; then
  alias processes_all='ps -AFH'
else
  alias processes_all='ps -Afjv'
fi

if [ "$OS" = "linux" ] ; then
  alias systail='tail -f /var/log/syslog'
else
  alias systail='tail -f /var/log/system.log'
fi
alias m='more'

alias df='df -h'

alias xtidy="tidy -m -i -xml" # beautify XML

# Shows most used commands, cool script I got this from: http://lifehacker.com/software/how-to/turbocharge-your-terminal-274317.php
alias profileme="history | awk '{print \$2}' | awk 'BEGIN{FS=\"|\"}{print \$1}' | sort | uniq -c | sort -n | tail -n 20 | sort -nr"

alias untar="tar xvzf"

alias cp_folder="cp -Rpv" #copies folder and all sub files and folders, preserving security and dates

alias mirror_website="wget -m -x -p --convert-links --no-host-directories --no-cache -erobots=off"

killhard() {
    kill -9 "$1"
}



# Bring in the other files ----------------------------------------------------
if [ $IS_INTERACTIVE = 'true' ] ; then
#  some handy help functions for often-used programs
  source ~/.bashrc_help

  source ~/src/dotfiles/bin/mq/mq.sh # MySQL tools
  #source ~/src/dotfiles/bin/rr/rr.sh # Rails tools
  source ~/src/dotfiles/bin/gt/gt.sh # Git tools
  source ~/src/dotfiles/bin/sv/sv.sh # SVN tools
fi

if [ -f ~/.bashrc_local ]; then
  source ~/.bashrc_local
fi
#  environment variables for various tools
if [ -f ~/.bashrc_envs ]; then
	source ~/.bashrc_envs
fi



# Test ------------------------------------------------------------------------ 

#if [ "$OS" = "linux" ] ; then
#elif
#else
#fi
#gss= "git submodule status"
alias gss="git submodule foreach git status | less"

gsff() {
  git submodule foreach \"$@ || :\"
}


